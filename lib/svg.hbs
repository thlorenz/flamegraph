<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">

<svg version="1.1" id="flamegraph-svg" 
  data-width="{{imagewidth}}" width="{{imagewidth}}" 
  height="{{imageheight}}" data-height="{{imageheight}}"
  onload="init(evt)" 
  viewBox="0 0 {{imagewidth}} {{imageheight}}" 
  xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0">
    <stop stop-color="{{bgcolor1}}" offset="5%" />
    <stop stop-color="{{bgcolor2}}" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	.func_g:hover { stroke:black; stroke-width:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	var details, searchbtn, matchedtxt, svg;
		
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	// mouse-over for info
	function s(node) {		// show
		info = g_to_text(node);
		details.nodeValue = "{{nametype}} " + info;
	}
	function c() {			// clear
		details.nodeValue = ' ';
	}

	function find_child(parent, name, attr) {
		if(!parent.childNodes){
			console.log("no child nodes", parent, name, attr);
		}
		var children = parent.childNodes || [];
		for (var i=0; i<children.length;i++) {
			if (children[i].tagName == name)
				return (attr != undefined) ? children[i].attributes[attr].value : children[i];
		}
		return;
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_"+attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_"+attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_"+attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes["width"].value) -3;
		var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
		t.attributes["x"].value = parseFloat(r.attributes["x"].value) +3;

		// Smaller than this size won't fit anything
		if (w < 2*{{fontsize}}*{{fontwidth}}) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x=txt.length-2; x>0; x--) {
			if (t.getSubStringLength(0, x+2) <= w) {
				t.textContent = txt.substring(0,x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for(var i=0, c=e.childNodes; i<c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes["x"] != undefined) {
				orig_save(e, "x");
				e.attributes["x"].value = (parseFloat(e.attributes["x"].value) - x - {{xpad}}) * ratio + {{xpad}};
				if(e.tagName == "text") e.attributes["x"].value = find_child(e.parentNode, "rect", "x") + 3;
			}
			if (e.attributes["width"] != undefined) {
				orig_save(e, "width");
				e.attributes["width"].value = parseFloat(e.attributes["width"].value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for(var i=0, c=e.childNodes; i<c.length; i++) {
			zoom_child(c[i], x-{{xpad}}, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes["x"] != undefined) {
				orig_save(e, "x");
				e.attributes["x"].value = {{xpad}};
			}
			if (e.attributes["width"] != undefined) {
				orig_save(e, "width");
				e.attributes["width"].value = parseInt(svg.width.baseVal.value) - ({{xpad}}*2);
			}
		}
		if (e.childNodes == undefined) return;
		for(var i=0, c=e.childNodes; i<c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr["width"].value);
		var xmin = parseFloat(attr["x"].value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr["y"].value);
		var ratio = (svg.width.baseVal.value - 2*{{xpad}}) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		var unzoombtn = document.getElementById("unzoom");
		unzoombtn.style["opacity"] = "1.0";

		var el = document.getElementsByTagName("g");
		for(var i=0;i<el.length;i++){
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a["x"].value);
			var ew = parseFloat(a["width"].value);
			// Is it an ancestor
			//if ($inverted == 0) {
				var upstack = parseFloat(a["y"].value) > ymin;
			//} else {
			//	var upstack = parseFloat(a["y"].value) < ymin;
			//}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.style["opacity"] = "0.5";
					zoom_parent(e);
					e.onclick = function(e){unzoom(); zoom(this);};
					update_text(e);
				}
				// not in current path
				else
					e.style["display"] = "none";
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.style["display"] = "none";
				}
				else {
					zoom_child(e, xmin, ratio);
					e.onclick = function(e){zoom(this);};
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		var unzoombtn = document.getElementById("unzoom");
		unzoombtn.style["opacity"] = "0.0";

		var el = document.getElementsByTagName("g");
		for(i=0;i<el.length;i++) {
			el[i].style["display"] = "block";
			el[i].style["opacity"] = "1";
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}
]]>
</script>


<rect x="0.0" y="0" id="svg-background" width="{{imagewidth}}" height="{{imageheight}}" fill="url(#background)"  />
<!--<text text-anchor="middle" x="{{titleX}}" y="24" font-size="17" font-family="{{fonttype}}" fill="rgb(0,0,0)">{{{titletext}}}</text>-->
<text text-anchor="left" x="{{xpad}}" y="{{detailsY}}" font-size="{{fontsize}}" font-family="{{fonttype}}" fill="rgb(0,0,0)" id="details"> </text>
<text text-anchor="left" x="{{xpad}}" y="{{unzoomY}}" font-size="{{fontsize}}" font-family="{{fonttype}}" fill="rgb(0,0,0)" id="unzoom" onclick="unzoom()" style="opacity: 0.0">Reset Zoom</text>

{{#each nodes}}
<g class="func_g {{class}}" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)" data-search="{{{search}}}" data-funcname="{{{func}}}">
  <title>{{{name}}} {{{samples}}}</title>
  <rect x="{{rect_x}}" data-x="{{rect_x}}" y="{{rect_y}}" width="{{rect_w}}" data-width="{{rect_w}}" height="{{rect_h}}" data-height="{{rect_h}}" fill="{{rect_fill}}" rx="2" ry="2"></rect>
  <text data-x="{{text_x}}" x="{{text_x}}" y="{{text_y}}" font-size="{{../fontsize}}" font-family="{{../fonttype}}" fill="rgb(0,0,0)">{{{text}}}</text>
</g>
{{/each}}

</svg>
